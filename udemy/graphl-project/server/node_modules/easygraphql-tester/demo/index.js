'use strict'

const fs = require('fs')
const path = require('path')
const gql = require('graphql-tag')
const EasyGraphQLTester = require('../lib')

const testSchema = fs.readFileSync(path.join(__dirname, 'schema.gql'), 'utf8')

const schema = `
  type Query {
    node(id: Int!): Node
    test(date: Date!): Int!
  }

  type Mutation {
    test(input: TestInput!): Int!
  }

  input TestInput {
    date: Date!
    name: String!
  }

  type Issue implements Node {
    author: Actor
    id: ID!
  }

  interface Actor {
    login: String!
  }

  interface Node {
    id: ID!
  }

  scalar Date
`

const typeDefs = gql`
  type Query {
    name: String!
  }
`;



const tester = new EasyGraphQLTester(schema)

const query = `
  query trialQuery($id: Int!) {
    node(id: $id) {
      id
      ... on Issue {
        author {
          login
        }
      }
    }
  }
`

const query1 = `
query ConnectedApps($uuid: UUID!) {
  organization(uuid: $uuid) {
    id
    name
    projects {
      nodes {
        id
        name
        githubIntegration {
          repository {
            owner {
              avatarUrl
            }
          }
        }
      }
    }
  }
}
`

const mutation = `
  mutation CREATE_USER($input: UserInput!) {
    createUser(input: $input) {
      username
    }
  }
`

const validMutation = `
  mutation TEST($input: TestInput!) {
    test(input: $input) 
  }
`;

console.log(tester.mock({
  query: validMutation,
  variables: {
    input: {
      name: 'name',
      date: '1'
    }
  }
}))

console.log(tester.test(true, validMutation, {
  input: {
    name: 'name',
    date: '1'
  }
}))
// console.log(tester.mock({
//   query,
//   variables: {
//     id: 1
//   }
// }))

// console.log(tester.mock({
//   query: query1,
//   variables: {
//     uuid: '1'
//   }
// }).data.organization.projects);